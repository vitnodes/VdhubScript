#!/bin/bash

# –ö–æ–ª—å–æ—Ä–æ–≤—ñ –∫–æ–¥–∏ –¥–ª—è –≤–∏–≤–æ–¥—É –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—Ä—É–∫—É –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
print_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø–∞
display_logo() {
    curl -s https://raw.githubusercontent.com/vitnodes/VdhubScript/main/logo.sh | bash
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ Chain ID —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–º—É —Ñ–∞–π–ª—ñ mainnet
update_mainnet_chain_ids() {
    local config_path="$HOME/abstract-node/external-node/mainnet-external-node.yml"
    print_color "$COLOR_BLUE" "üîß –û–Ω–æ–≤–ª—é—î–º–æ Chain ID —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó mainnet..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    if [ ! -f "$config_path" ]; then
        print_color "$COLOR_RED" "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $config_path"
        return 1
    fi
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    local temp_file="${config_path}.tmp"
    
    # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è Chain ID
    sed -e 's/EN_L1_CHAIN_ID: .*/EN_L1_CHAIN_ID: 1/' \
        -e 's/EN_L2_CHAIN_ID: .*/EN_L2_CHAIN_ID: 2741/' \
        "$config_path" > "$temp_file"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
    if [ $? -eq 0 ]; then
        mv "$temp_file" "$config_path"
        print_color "$COLOR_GREEN" "‚úÖ Chain ID –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó mainnet"
    else
        print_color "$COLOR_RED" "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ Chain ID"
        rm -f "$temp_file"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_color "$COLOR_RED" "üîç Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo systemctl enable docker
        sudo systemctl start docker
    else
        print_color "$COLOR_GREEN" "‚úÖ Docker –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker Compose
check_docker_compose() {
    if ! command -v docker compose &> /dev/null; then
        print_color "$COLOR_RED" "üîç Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Docker Compose..."
        sudo apt update
        sudo apt install -y docker-compose-plugin
    else
        print_color "$COLOR_GREEN" "‚úÖ –í–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–¥–∏ Abstract
install_node() {
    local network=$1
    
    print_color "$COLOR_BLUE" "üì• –ö–ª–æ–Ω—É—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π..."
    git clone https://github.com/Abstract-Foundation/abstract-node
    cd abstract-node/external-node
    
    if [ "$network" == "testnet" ]; then
        print_color "$COLOR_BLUE" "üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ testnet –Ω–æ–¥—É..."
        docker compose -f testnet-external-node.yml up -d
    else
        update_mainnet_chain_ids
        print_color "$COLOR_BLUE" "üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ mainnet –Ω–æ–¥—É..."
        docker compose -f mainnet-external-node.yml up -d
    fi
    
    print_color "$COLOR_GREEN" "‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_logs() {
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:"
    docker ps --format "{{.Names}}"
    echo
    read -p "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤: " container_name
    
    if [ -n "$container_name" ]; then
        docker logs -f --tail=100 "$container_name"
    else
        print_color "$COLOR_RED" "‚ùå –Ü–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–æ–¥–∏
reset_node() {
    local network=$1
    
    print_color "$COLOR_YELLOW" "üîÑ –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –Ω–æ–¥–∏..."
    cd ~/abstract-node/external-node
    if [ "$network" == "testnet" ]; then
        docker compose -f testnet-external-node.yml down --volumes
    else
        docker compose -f mainnet-external-node.yml down --volumes
    fi
    
    print_color "$COLOR_GREEN" "‚úÖ –°–∫–∏–¥–∞–Ω–Ω—è –Ω–æ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
restart_container() {
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:"
    docker ps --format "{{.Names}}"
    echo
    read -p "–í–≤–µ–¥—ñ—Ç—å —ñ–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É: " container_name
    
    if [ -n "$container_name" ]; then
        print_color "$COLOR_YELLOW" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name..."
        docker restart "$container_name"
        print_color "$COLOR_GREEN" "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!"
    else
        print_color "$COLOR_RED" "‚ùå –Ü–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–¥–∏
remove_node() {
    print_color "$COLOR_YELLOW" "‚ö†Ô∏è –£–≤–∞–≥–∞! –¶–µ –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ç–∞ –¥–∞–Ω—ñ –Ω–æ–¥–∏!"
    read -p "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): " confirm
    
    if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
        print_color "$COLOR_BLUE" "üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
        cd ~/abstract-node/external-node
        docker compose -f testnet-external-node.yml down --volumes
        docker compose -f mainnet-external-node.yml down --volumes
        
        print_color "$COLOR_BLUE" "üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –Ω–æ–¥–∏..."
        cd ~/
        rm -rf abstract-node
        
        print_color "$COLOR_GREEN" "‚úÖ –ù–æ–¥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!"
    else
        print_color "$COLOR_YELLOW" "üõë –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
    fi
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Å–∫—Ä–∏–ø—Ç–∞
main_menu() {
    while true; do
        clear
        display_logo
        echo
        print_color "$COLOR_BLUE" "=== üåü –ú–µ–Ω—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–¥–∏ Abstract === "
        echo "1. üõ†Ô∏è  –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (Docker –∏ Docker Compose)"
        echo "2. üåê –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Testnet –Ω–æ–¥—É"
        echo "3. üåç –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Mainnet –Ω–æ–¥—É"
        echo "4. üìã –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "5. üîÑ –°–∫–∏–Ω—É—Ç–∏ Testnet –Ω–æ–¥—É"
        echo "6. üîÑ –°–∫–∏–Ω—É—Ç–∏ Mainnet –Ω–æ–¥—É"
        echo "7. üîÉ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
        echo "8. üóëÔ∏è  –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–¥—É"
        echo "9. üö™ –í–∏—Ö—ñ–¥"
        echo
        read -p "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-9): " choice
        
        case $choice in
            1)
                check_docker
                check_docker_compose
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            2)
                install_node "testnet"
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            3)
                install_node "mainnet"
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            4)
                check_logs
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            5)
                reset_node "testnet"
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            6)
                reset_node "mainnet"
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            7)
                restart_container
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            8)
                remove_node
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
            9)
                print_color "$COLOR_GREEN" "üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—á–∞ Abstract Node!"
                exit 0
                ;;
            *)
                print_color "$COLOR_RED" "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..."
                ;;
        esac
    done
}

# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu
